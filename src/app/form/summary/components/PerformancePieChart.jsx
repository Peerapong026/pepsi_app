"use client";

import { useMemo } from "react";
import { ResponsiveContainer, PieChart, Pie, Cell, Tooltip, Legend } from "recharts";
import { Card, CardHeader, CardTitle, CardContent } from "../../../components/ui/card";

const COLORS = ["#00C49F", "#FF8042", "#999999", "#8884d8", "#ffc658", "#ff6699"]; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏µ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢

// üîß Normalize ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function normalizeResult(result = "") {
  const cleaned = result.trim();
  if (["‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ã‡∏∑‡πâ‡∏≠", "‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡∏ô‡∏ó‡∏µ"].includes(cleaned)) return "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∑‡πâ‡∏≠";
  if (["‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠", "‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠", "‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à"].includes(cleaned)) return "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠";
  return "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";
}

// üî¢ Group data ‡∏ï‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
function groupPerformance(performance = []) {
  const result = {
    "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∑‡πâ‡∏≠": 0,
    "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠": 0,
    "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": 0,
  };
  performance.forEach((p) => {
    const qty = p.per_quantity || 0;
    const key = normalizeResult(p.per_result);
    result[key] += qty;
  });
  return Object.entries(result)
    .filter(([, value]) => value > 0)
    .map(([name, value]) => ({ name, value }));
}

// üß† Group ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÅ‡∏ö‡∏ö dynamic
function groupReasons(performance = [], type = "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠") {
  const reasons = {};
  performance.forEach((p) => {
    if (normalizeResult(p.per_result) === type) {
      const reason = p.per_reason?.trim() || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•";
      reasons[reason] = (reasons[reason] || 0) + (p.per_quantity || 0);
    }
  });
  return Object.entries(reasons).map(([name, value]) => ({ name, value }));
}

// üè∑Ô∏è Custom Label
function renderCustomLabel(props) {
  const {
    cx,
    cy,
    midAngle,
    innerRadius,
    outerRadius,
    percent,
    index,
    name,
    value,
  } = props;

  const RADIAN = Math.PI / 180;
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5;
  const x = cx + radius * Math.cos(-midAngle * RADIAN);
  const y = cy + radius * Math.sin(-midAngle * RADIAN);

  return (
    <text
      x={x}
      y={y}
      fill="#333"
      textAnchor={x > cx ? "start" : "end"}
      dominantBaseline="central"
      fontSize={12}
    >
      {`${name}: ${value} ‡∏Ñ‡∏ô (${(percent * 100).toFixed(1)}%)`}
    </text>
  );
}

export default function PerformancePieChart({ performanceData = [] }) {
  const chartData = useMemo(() => groupPerformance(performanceData), [performanceData]);
  const buyReasonChartData = useMemo(
    () => groupReasons(performanceData, "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∑‡πâ‡∏≠"),
    [performanceData]
  );
  const notBuyReasonChartData = useMemo(
    () => groupReasons(performanceData, "‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠"),
    [performanceData]
  );

  // üìä Template ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PieChart
  const renderPieChart = (data, chartKey) => (
    <ResponsiveContainer width="100%" height={300}>
      <PieChart margin={{ top: 10, right: 10, bottom: 10, left: 10 }}>
        <Pie
          data={data}
          dataKey="value"
          nameKey="name"
          cx="50%"
          cy="50%"
          innerRadius={50}
          outerRadius={90}
          paddingAngle={2}
          labelLine={true}
          label={({ value, percent }) =>
            ` ${Number(value).toLocaleString()} ‡∏Ñ‡∏ô (${(percent * 100).toFixed(1)}%)`
          }
          labelPosition="outside"
        >
          {data.map((_, index) => (
            <Cell key={`${chartKey}-${index}`} fill={COLORS[index % COLORS.length]} />
          ))}
        </Pie>
        <Tooltip formatter={(value) => `${Number(value).toLocaleString()} ‡∏Ñ‡∏ô`} />
        <Legend iconType="circle" layout="horizontal" align="center" wrapperStyle={{ fontSize: 13 }} />
      </PieChart>
    </ResponsiveContainer>
  );

  return (
    <>
      {/* ‡∏Å‡∏£‡∏≤‡∏ü‡∏´‡∏•‡∏±‡∏Å: ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡∏° */}
      <Card className="rounded-xl shadow-md border border-gray-100 bg-white mb-6">
        <CardHeader>
          <CardTitle>‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</CardTitle>
        </CardHeader>
        <CardContent>
          {chartData.length === 0 ? (
            <p className="text-gray-500">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏ä‡∏¥‡∏°</p>
          ) : (
            renderPieChart(chartData, "main")
          )}
        </CardContent>
      </Card>

      {/* ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ã‡∏∑‡πâ‡∏≠/‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠ */}
      {(buyReasonChartData.length > 0 || notBuyReasonChartData.length > 0) && (
        <div className="grid md:grid-cols-2 gap-4">
          {buyReasonChartData.length > 0 && (
            <Card className="rounded-xl shadow-md border border-gray-100 bg-white">
              <CardHeader>
                <CardTitle>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ã‡∏∑‡πâ‡∏≠</CardTitle>
              </CardHeader>
              <CardContent>
                {renderPieChart(buyReasonChartData, "buy")}
              </CardContent>
            </Card>
          )}

          {notBuyReasonChartData.length > 0 && (
            <Card className="rounded-xl shadow-md border border-gray-100 bg-white">
              <CardHeader>
                <CardTitle>‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏µ‡πà‡∏ä‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏°‡πà‡∏ã‡∏∑‡πâ‡∏≠</CardTitle>
              </CardHeader>
              <CardContent>
                {renderPieChart(notBuyReasonChartData, "notbuy")}
              </CardContent>
            </Card>
          )}
        </div>
      )}
    </>
  );
}